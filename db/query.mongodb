/* Creacion de colecciones*/
use("db_campus_alquiler")
db.createCollection("sucursal", {
  capped: true,
  size: 690,
  max: 6,
  validator:{
      $jsonSchema: {
          bsonType: "object",
          title: "Sucursal Object Validation",
          required: [ "ID_Sucursal", "Nombre", "Direccion", "Telefono"],
          properties: {
            ID_Sucursal: {
                bsonType: "int",
                description: "Error en los parametros de entrada: 'ID_Sucursal'",
             },
            Nombre: {
                bsonType: "string",
                description: "Error en los parametros de entrada: 'Nombre'",
                maxLength: 60
             },
            Direccion: {
              bsonType: "string",
              description: "Error en los parametros de entrada: 'Direccion'",
              maxLength: 200
           },
           Telefono: {
            bsonType: "string",
            description: "Error en los parametros de entrada: 'Telefono'",
            pattern: "^[0-9+]+$",
            maxLength: 13
         }
          }
       },
  }
});

use("db_campus_alquiler")
db.createCollection("automovil", {
  capped: true,
  size: 690,
  max: 6,
  validator:{
      $jsonSchema: {
          bsonType: "object",
          title: "Automovil Object Validation",
          required: [ "ID_Automovil", "Marca", "Modelo", "Anio", "Tipo", "Capacidad", "Precio_Diario"],
          properties: {
            ID_Automovil: {
                bsonType: "string",
                maxLength: 8,
                pattern: "^[A-Z0-9]+$",
                description:{
                  status: 402,
                  message: "Error en los parametros de entrada: 'ID_Automovil'"
                } 
             },
             Marca: {
                bsonType: "string",
                maxLength: 60,
                description: "Error en los parametros de entrada: 'Marca'"
             },
             Modelo: {
              bsonType: "string",
              maxLength: 200,
              description: "Error en los parametros de entrada: 'Modelo'"
           },
            Anio: {
              bsonType: "int",
              minimum:2000,
              maximum:3000,
              description: "Error en los parametros de entrada: 'Anio'"
          },
            Tipo: {
              bsonType: "string",
              maxLength: 60,
              description: "Error en los parametros de entrada: 'Tipo'"
          },
          Capacidad: {
              bsonType: "int",
              minimum:1,
              maximum:30,
              description: "Error en los parametros de entrada: 'Capacidad'"
          },
          Precio_Diario: {
            bsonType: "int",
            maxLength: 9,
            description: "Error en los parametros de entrada: 'Precio_Diario'"
        }
          }
       },
  }
});

use("db_campus_alquiler")
db.createCollection("sucursal_automovil", {
  capped: true,
  size: 690,
  max: 6,
  validator:{
      $jsonSchema: {
          bsonType: "object",
          title: "Sucursal_Automovil Object Validation",
          required: [ "ID_Sucursal_id", "ID_Automovil_id", "Cantidad_Disponible"],
          properties: {
            ID_Sucursal_id: {
              bsonType: "int",
              description: "Error en los parametros de entrada: 'ID_Sucursal_id'",
             },
             ID_Automovil_id: {
              bsonType: "string",
              maxLength: 8,
              pattern: "^[A-Z0-9]+$",
              description: "Error en los parametros de entrada: 'ID_Automovil_id'"
             },
             Cantidad_Disponible: {
              bsonType: "int",
              maxLength: 4,
              description: "Error en los parametros de entrada: 'Cantidad_Disponible'"
           }
          }
       },
  }
});

use("db_campus_alquiler")
db.createCollection("cliente", {
  capped: true,
  size: 890,
  max: 6,
  validator:{
      $jsonSchema: {
          bsonType: "object",
          title: "Automovil Object Validation",
          required: [ "ID_Cliente", "Nombre", "Apellido", "DNI", "Direccion", "Telefono", "Email"],
          properties: {
            ID_Cliente: {
                bsonType: "int",
                maxLength: 10,
                description: "Error en los parametros de entrada: 'ID_Cliente'"
             },
             Nombre: {
                bsonType: "string",
                maxLength: 30,
                pattern: "^[a-zA-Z\s]+$",
                description: "Error en los parametros de entrada: 'Nombre'"
             },
             Apellido: {
                bsonType: "string",
                maxLength: 30,
                pattern: "^[a-zA-Z\s]+$",
                description: "Error en los parametros de entrada: 'Apellido'"
           },
              DNI: {
                bsonType: "int",
                maxLength: 10,
                description: "Error en los parametros de entrada: 'DNI'"
            },
            Direccion: {
                bsonType: "string",
                maxLength: 200,
                description: "Error en los parametros de entrada: 'Direccion'",
            },
            Telefono: {
                bsonType: "string",
                maxLength: 13,
                pattern: "^[0-9+]+$",
                description: "Error en los parametros de entrada: 'Telefono'",
            },
            Email: {
              bsonType: "string",
              maxLength: 100,
              pattern: "^[a-zA-Z0-9\-#/@._]+$",
              description: "Error en los parametros de entrada: 'Email'"
          }
          }
       },
  }
})

use("db_campus_alquiler")
db.createCollection("alquiler", {
  capped: true,
  size: 890,
  max: 8,
  validator:{
      $jsonSchema: {
          bsonType: "object",
          title: "Alquiler Object Validation",
          required: [ "ID_Alquiler", "ID_Cliente_id", "ID_Automovil_id", "Fecha_Inicio", "Fecha_Fin", "Costo_Total", "Estado"],
          properties: {
            ID_Alquiler: {
                bsonType: "int",
                description: "Error en los parametros de entrada: 'ID_Alquiler'"
             },
             ID_Cliente_id: {
                bsonType: "int",
                maxLength: 10,
                description: "Error en los parametros de entrada: 'ID_Cliente_id'"
             },
             ID_Automovil_id: {
                bsonType: "string",
                maxLength: 8,
                pattern: "^[A-Z0-9]+$",
                description: "Error en los parametros de entrada: 'ID_Automovil'"
           },
             Fecha_Inicio: {
                bsonType: "date",
                description: "Error en los parametros de entrada: 'Fecha_Inicio'"
            },
            Fecha_Fin: {
              bsonType: "date",
              description: "Error en los parametros de entrada: 'Fecha_Fin'"
            },
            Costo_Total: {
              bsonType: "int",
              maxLength: 11,
              description: "Error en los parametros de entrada: 'Costo_Total'"
            },
            Estado: {
                bsonType: "string",
                maxLength: 30,
                pattern: "^[a-zA-Z\s]+$",
                description: "Error en los parametros de entrada: 'Estado'"
          }
          }
       },
  }
})

use("db_campus_alquiler")
db.createCollection("reserva", {
  capped: true,
  size: 890,
  max: 8,
  validator:{
      $jsonSchema: {
          bsonType: "object",
          title: "Reserva Object Validation",
          required: [ "ID_Reserva", "ID_Cliente_id", "ID_Automovil_id", "Fecha_Reserva", "Fecha_Inicio", "Fecha_Fin", "Estado"],
          properties: {
            ID_Reserva: {
                bsonType: "int",
                description: "Error en los parametros de entrada: 'ID_Alquiler'"
             },
             ID_Cliente_id: {
                bsonType: "int",
                maxLength: 10,
                description: "Error en los parametros de entrada: 'ID_Cliente_id'"
             },
             ID_Automovil_id: {
                bsonType: "string",
                maxLength: 8,
                pattern: "^[A-Z0-9]+$",
                description: "Error en los parametros de entrada: 'ID_Automovil'"
           },
              Fecha_Reserva: {
                bsonType: "date",
                description: "Error en los parametros de entrada: 'Fecha_Reserva'"
            },
             Fecha_Inicio: {
                bsonType: "date",
                description: "Error en los parametros de entrada: 'Fecha_Inicio'"
            },
            Fecha_Fin: {
              bsonType: "date",
              description: "Error en los parametros de entrada: 'Fecha_Fin'"
            },
            Estado: {
                bsonType: "string",
                maxLength: 30,
                pattern: "^[a-zA-Z\s]+$",
                description: "Error en los parametros de entrada: 'Estado'"
          }
          }
       },
  }
})

use("db_campus_alquiler")
db.createCollection("empleado", {
  capped: true,
  size: 890,
  max: 6,
  validator:{
      $jsonSchema: {
          bsonType: "object",
          title: "Empleado Object Validation",
          required: [ "ID_Empleado", "Nombre", "Apellido", "DNI", "Direccion", "Telefono", "Cargo"],
          properties: {
            ID_Empleado: {
                bsonType: "int",
                maxLength: 10,
                description: "Error en los parametros de entrada: 'ID_Empleado'"
             },
             Nombre: {
                bsonType: "string",
                maxLength: 30,
                pattern: "^[a-zA-Z\s]+$",
                description: "Error en los parametros de entrada: 'Nombre'"
             },
             Apellido: {
                bsonType: "string",
                maxLength: 30,
                pattern: "^[a-zA-Z\s]+$",
                description: "Error en los parametros de entrada: 'Apellido'"
           },
              DNI: {
                bsonType: "int",
                maxLength: 10,
                description: "Error en los parametros de entrada: 'DNI'"
            },
            Direccion: {
                bsonType: "string",
                maxLength: 200,
                description: "Error en los parametros de entrada: 'Direccion'",
            },
            Telefono: {
                bsonType: "string",
                maxLength: 13,
                pattern: "^[0-9+]+$",
                description: "Error en los parametros de entrada: 'Telefono'",
            },
            Cargo: {
              bsonType: "string",
              maxLength: 60,
              pattern: "^[a-zA-Z\s]+$",
              description: "Error en los parametros de entrada: 'Cargo'"
          }
          }
       },
  }
})

use("db_campus_alquiler")
db.createCollection("registro_entrega", {
  capped: true,
  size: 890,
  max: 8,
  validator:{
      $jsonSchema: {
          bsonType: "object",
          title: "Reserva Object Validation",
          required: [ "ID_Registro", "ID_Alquiler_id", "ID_Empleado_id", "Fecha_Entrega", "Combustible_Entregado", "Kilometraje_Entregado"],
          properties: {
            ID_Registro: {
                bsonType: "int",
                description: "Error en los parametros de entrada: 'ID_Registro'"
             },
             ID_Alquiler_id: {
                bsonType: "int",
                description: "Error en los parametros de entrada: 'ID_Alquiler_id'"
             },
             ID_Empleado_id: {
                bsonType: "int",
                maxLength: 10,
                description: "Error en los parametros de entrada: 'ID_Empleado'"
           },
           Fecha_Entrega: {
                bsonType: "date",
                description: "Error en los parametros de entrada: 'Fecha_Entrega'"
            },
            Combustible_Entregado: {
                bsonType: "number",
                maxLength: 4,
                description: "Error en los parametros de entrada: 'Combustible_Entregado'"
            },
            Kilometraje_Entregado: {
              bsonType: "int",
              maxLength: 6,
              description: "Error en los parametros de entrada: 'Kilometraje_Entregado'"
            }
          }
       },
  }
})

use("db_campus_alquiler")
db.createCollection("registro_devolucion", {
  capped: true,
  size: 890,
  max: 8,
  validator:{
      $jsonSchema: {
          bsonType: "object",
          title: "Reserva Object Validation",
          required: [ "ID_Registro", "ID_Alquiler_id", "ID_Empleado_id", "Fecha_Devolucion", "Combustible_Devuelto", "Kilometraje_Devuelto", "Monto_Adicional"],
          properties: {
            ID_Registro: {
                bsonType: "int",
                description: "Error en los parametros de entrada: 'ID_Registro'"
             },
             ID_Alquiler_id: {
                bsonType: "int",
                description: "Error en los parametros de entrada: 'ID_Alquiler_id'"
             },
             ID_Empleado_id: {
                bsonType: "int",
                maxLength: 10,
                description: "Error en los parametros de entrada: 'ID_Empleado'"
           },
           Fecha_Devolucion: {
                bsonType: "date",
                description: "Error en los parametros de entrada: 'Fecha_Devolucion'"
            },
            Combustible_Devuelto: {
                bsonType: "number",
                maxLength: 4,
                description: "Error en los parametros de entrada: 'Combustible_Devuelto'"
            },
            Kilometraje_Devuelto: {
              bsonType: "int",
              maxLength: 6,
              description: "Error en los parametros de entrada: 'Kilometraje_Devuelto'"
            },
            Monto_Adicional:{
              bsonType: "int",
              maxLength: 10,
              description:"Error en los parametros de entrada: 'Monto_Adicional'"
            }
          }
       },
  }
})

/* AGREGAR DATOS */
use("db_campus_alquiler");
db.sucursal.insertMany([
  {
    ID_Sucursal: 1,
    Nombre: "Bucaramanga",
    Direccion: "calla 11 cr.32",
    Telefono: "3588654216",
  },
  {
    ID_Sucursal: 2,
    Nombre: "Medellin",
    Direccion: "calla 11 cr.32",
    Telefono: "3588654216",
  },
  {
    ID_Sucursal: 3,
    Nombre: "Bogota",
    Direccion: "calla 11 cr.32",
    Telefono: "3215489586",
  },
  {
    ID_Sucursal: 4,
    Nombre: "Barranca",
    Direccion: "calla 11 cr.32",
    Telefono: "3156589574",
  },
]);

use("db_campus_alquiler");
db.automovil.insertMany([
  {
    ID_Automovil: "CAR78",
    Marca: "Chevrolet",
    Modelo: "Camaro",
    Anio: 2020,
    Tipo: "Automovil",
    Capacidad: 2,
    Precio_Diario: 1400000,
  },
  {
    ID_Automovil: "VIL74",
    Marca: "Toyota",
    Modelo: "Prado",
    Anio: 2020,
    Tipo: "Camioneta",
    Capacidad: 4,
    Precio_Diario: 2000000,
  },
  {
    ID_Automovil: "PIN41",
    Marca: "Ford",
    Modelo: "Fiesta",
    Anio: 2020,
    Tipo: "Automovil",
    Capacidad: 4,
    Precio_Diario: 600000,
  },
  {
    ID_Automovil: "PER89",
    Marca: "Ford",
    Modelo: "Raptor",
    Anio: 2020,
    Tipo: "Camioneta",
    Capacidad: 4,
    Precio_Diario: 2600000,
  },
  {
    ID_Automovil: "LLO69",
    Marca: "Chevrolet",
    Modelo: "Camaro",
    Anio: 2020,
    Tipo: "Automovil",
    Capacidad: 2,
    Precio_Diario: 100000,
  },
]);

use("db_campus_alquiler");
db.sucursal_automovil.insertMany([
  {
    ID_Sucursal_id: 1,
    ID_Automovil_id: "CAR78",
    Cantidad_Disponible: 5,
  },
  {
    ID_Sucursal_id: 2,
    ID_Automovil_id: "VIL74",
    Cantidad_Disponible: 9,
  },
  {
    ID_Sucursal_id: 3,
    ID_Automovil_id: "PIN41",
    Cantidad_Disponible: 15,
  },
  {
    ID_Sucursal_id: 3,
    ID_Automovil_id: "PER89",
    Cantidad_Disponible: 20,
  },
  {
    ID_Sucursal_id: 1,
    ID_Automovil_id: "LLO69",
    Cantidad_Disponible: 15,
  },
]);

use("db_campus_alquiler");
db.cliente.insertMany([
  {
    ID_Cliente: 1,
    Nombre: "Carlos",
    Apellido: "Villafrades",
    DNI: 125356895,
    Direccion: "Calle 11",
    Telefono: "3235866595",
    Email: "cavillafrades@gmail.com",
  },
  {
    ID_Cliente: 2,
    Nombre: "Camilo",
    Apellido: "Sanchez",
    DNI: 63359687,
    Direccion: "Calle 13",
    Telefono: "325854596",
    Email: "camilo@gmail.com",
  },
  {
    ID_Cliente: 3,
    Nombre: "Jose",
    Apellido: "Villafrades",
    DNI: 17845796,
    Direccion: "Calle 15",
    Telefono: "3185487154",
    Email: "jose@gmail.com",
  },
  {
    ID_Cliente: 4,
    Nombre: "Felipe",
    Apellido: "Torres",
    DNI: 68854752,
    Direccion: "Calle 17",
    Telefono: "3112584875",
    Email: "felipe@gmail.com",
  },
  {
    ID_Cliente: 5,
    Nombre: "Javier",
    Apellido: "Maraes",
    DNI: 87457625,
    Direccion: "Calle 200",
    Telefono: "3225478457",
    Email: "javier@gmail.com",
  },
]);

use("db_campus_alquiler");
db.alquiler.insertMany([
  {
    ID_Alquiler: 1,
    ID_Cliente_id: 1,
    ID_Automovil_id: "CAR78",
    Fecha_Inicio: new Date("2023-07-15"),
    Fecha_Fin: new Date("2023-07-20"),
    Costo_Total: 250005,
    Estado: "Activo",
  },
  {
    ID_Alquiler: 2,
    ID_Cliente_id: 2,
    ID_Automovil_id: "VIL74",
    Fecha_Inicio: new Date("2023-08-05"),
    Fecha_Fin: new Date("2023-08-12"),
    Costo_Total: 20052225,
    Estado: "Activo",
  },
  {
    ID_Alquiler: 3,
    ID_Cliente_id: 3,
    ID_Automovil_id: "PIN41",
    Fecha_Inicio: new Date("2023-09-15"),
    Fecha_Fin: new Date("2023-09-20"),
    Costo_Total: 255411,
    Estado: "Inactivo",
  },
  {
    ID_Alquiler: 4,
    ID_Cliente_id: 4,
    ID_Automovil_id: "PER89",
    Fecha_Inicio: new Date("2023-12-20"),
    Fecha_Fin: new Date("2023-12-31"),
    Costo_Total: 50026658,
    Estado: "Inactivo",
  },
  {
    ID_Alquiler: 5,
    ID_Cliente_id: 1,
    ID_Automovil_id: "LLO69",
    Fecha_Inicio: new Date("2023-08-15"),
    Fecha_Fin: new Date("2023-08-20"),
    Costo_Total: 2505555,
    Estado: "Inactivo",
  },
  {
    ID_Alquiler: 6,
    ID_Cliente_id: 2,
    ID_Automovil_id: "CAR78",
    Fecha_Inicio: new Date("2023-09-15"),
    Fecha_Fin: new Date("2023-09-20"),
    Costo_Total: 25002585,
    Estado: "Inactivo",
  },
]);

use("db_campus_alquiler");
db.reserva.insertMany([
  {
    ID_Reserva: 1,
    ID_Cliente_id: 1,
    ID_Automovil_id: "CAR78",
    Fecha_Reserva: new Date("2023-07-15"),
    Fecha_Inicio: new Date("2024-01-15"),
    Fecha_Fin: new Date("2024-01-20"),
    Estado: "Pendiente",
  },
  {
    ID_Reserva: 2,
    ID_Cliente_id: 2,
    ID_Automovil_id: "VIL74",
    Fecha_Reserva: new Date("2023-09-15"),
    Fecha_Inicio: new Date("2024-02-15"),
    Fecha_Fin: new Date("2024-02-20"),
    Estado: "Pendiente",
  },
  {
    ID_Reserva: 3,
    ID_Cliente_id: 3,
    ID_Automovil_id: "PIN41",
    Fecha_Reserva: new Date("2023-11-15"),
    Fecha_Inicio: new Date("2024-02-15"),
    Fecha_Fin: new Date("2024-02-20"),
    Estado: "Confirmado",
  },
  {
    ID_Reserva: 4,
    ID_Cliente_id: 4,
    ID_Automovil_id: "PER89",
    Fecha_Reserva: new Date("2023-12-15"),
    Fecha_Inicio: new Date("2023-03-15"),
    Fecha_Fin: new Date("2023-03-20"),
    Estado: "Confirmado",
  },
]);

use("db_campus_alquiler");
db.empleado.insertMany([
  {
    ID_Empleado: 1,
    Nombre: "Carlos",
    Apellido: "Villafrades",
    DNI: 64578215,
    Direccion: "Calle 11",
    Telefono: "3225869547",
    Cargo: "Vendedor",
  },
  {
    ID_Empleado: 2,
    Nombre: "Jhoan",
    Apellido: "Santamaria",
    DNI: 54879571,
    Direccion: "Calle 11",
    Telefono: "3152568475",
    Cargo: "Gerente",
  },
  {
    ID_Empleado: 3,
    Nombre: "Pedro",
    Apellido: "Gonzalez",
    DNI: 10995864,
    Direccion: "Calle 12",
    Telefono: "3285268475",
    Cargo: "Vendedor",
  },
  {
    ID_Empleado: 4,
    Nombre: "Jesus",
    Apellido: "Duarte",
    DNI: 100454216,
    Direccion: "Calle 11",
    Telefono: "3112589516",
    Cargo: "Asistente",
  },
]);

use("db_campus_alquiler");
db.registro_entrega.insertMany([
  {
    ID_Registro: 1,
    ID_Alquiler_id: 1,
    ID_Empleado_id: 1,
    Fecha_Entrega: new Date("2023-12-15"),
    Combustible_Entregado: 5.2,
    Kilometraje_Entregado: 10000,
  },
  {
    ID_Registro: 2,
    ID_Alquiler_id: 2,
    ID_Empleado_id: 2,
    Fecha_Entrega: new Date("2023-10-15"),
    Combustible_Entregado: 7.5,
    Kilometraje_Entregado: 12000,
  },
  {
    ID_Registro: 3,
    ID_Alquiler_id: 3,
    ID_Empleado_id: 3,
    Fecha_Entrega: new Date("2023-11-15"),
    Combustible_Entregado: 5.2,
    Kilometraje_Entregado: 15000,
  },
  {
    ID_Registro: 4,
    ID_Alquiler_id: 4,
    ID_Empleado_id: 4,
    Fecha_Entrega: new Date("2023-10-15"),
    Combustible_Entregado: 6.2,
    Kilometraje_Entregado: 20000,
  },
]);

use("db_campus_alquiler");
db.registro_devolucion.insertMany([
  {
    ID_Registro: 1,
    ID_Alquiler_id: 1,
    ID_Empleado_id: 1,
    Fecha_Devolucion: new Date("2024-01-15"),
    Combustible_Devuelto: 5.2,
    Kilometraje_Devuelto: 20000,
    Monto_Adicional: 20000,
  },
  {
    ID_Registro: 2,
    ID_Alquiler_id: 2,
    ID_Empleado_id: 2,
    Fecha_Devolucion: new Date("2024-02-15"),
    Combustible_Devuelto: 5.0,
    Kilometraje_Devuelto: 22000,
    Monto_Adicional: 30000,
  },
  {
    ID_Registro: 3,
    ID_Alquiler_id: 3,
    ID_Empleado_id: 3,
    Fecha_Devolucion: new Date("2024-05-15"),
    Combustible_Devuelto: 6.0,
    Kilometraje_Devuelto: 26000,
    Monto_Adicional: 10000,
  },
  {
    ID_Registro: 4,
    ID_Alquiler_id: 4,
    ID_Empleado_id: 4,
    Fecha_Devolucion: new Date("2024-03-15"),
    Combustible_Devuelto: 5.0,
    Kilometraje_Devuelto: 30000,
    Monto_Adicional: 15000,
  },
]);

// /* Consultas con las Relaciones */

// /* Sucursal_Automovil */
// use("db_campus_alquiler");
// db.sucursal_automovil.aggregate([
//   {
//     $lookup: {
//       from: "sucursal",
//       localField: "ID_Sucursal_id",
//       foreignField: "_id",
//       as: "Sucursal_Info",
//     },
//   },
//   {
//     $unwind: "$Sucursal_Info",
//   },
//   {
//     $lookup: {
//       from: "automovil",
//       localField: "ID_Automovil_id",
//       foreignField: "_id",
//       as: "Automovil_Info",
//     },
//   },
//   {
//     $unwind: "$Automovil_Info",
//   },
//   {
//     $project: {
//       "Sucursal_Info.ID_Sucursal": 0,
//       "Automovil_Info.ID_Automovil": 0,
//     },
//   },
// ]);

// /* Reserva */
// use("db_campus_alquiler");
// db.reserva.aggregate([
//   {
//     $lookup: {
//       from: "cliente",
//       localField: "ID_Cliente_id",
//       foreignField: "_id",
//       as: "Cliente_Info",
//     },
//   },
//   {
//     $unwind: "$Cliente_Info",
//   },
//   {
//     $lookup: {
//       from: "automovil",
//       localField: "ID_Automovil_id",
//       foreignField: "_id",
//       as: "Automovil_Info",
//     },
//   },
//   {
//     $unwind: "$Automovil_Info",
//   },
//   {
//     $project: {
//       "Cliente_Info.ID_Cliente": 0,
//       "Automovil_Info.ID_Automovil": 0,
//     },
//   },
// ]);

// /* Alquiler */
// use("db_campus_alquiler");
// db.alquiler.aggregate([
//   {
//     $lookup: {
//       from: "cliente",
//       localField: "ID_Cliente_id",
//       foreignField: "_id",
//       as: "Cliente_Info",
//     },
//   },
//   {
//     $unwind: "$Cliente_Info",
//   },
//   {
//     $lookup: {
//       from: "automovil",
//       localField: "ID_Automovil_id",
//       foreignField: "_id",
//       as: "Automovil_Info",
//     },
//   },
//   {
//     $unwind: "$Automovil_Info",
//   },
//   {
//     $project: {
//       "Cliente_Info.ID_Cliente": 0,
//       "Automovil_Info.ID_Automovil": 0,
//     },
//   },
// ]);

// /* Registro Devolucion */
// use("db_campus_alquiler");
// db.registro_devolucion.aggregate([
//   {
//     $lookup: {
//       from: "alquiler",
//       localField: "ID_Alquiler_id",
//       foreignField: "_id",
//       as: "Alquiler_Info",
//     },
//   },
//   {
//     $unwind: "$Alquiler_Info",
//   },
//   {
//     $lookup: {
//       from: "empleado",
//       localField: "ID_Empleado_id",
//       foreignField: "_id",
//       as: "Empleado_Info",
//     },
//   },
//   {
//     $unwind: "$Empleado_Info",
//   },
//   {
//     $project: {
//       "Alquiler_Info.ID_Alquiler": 0,
//       "Empleado_Info.ID_Empleado": 0,
//     },
//   },
// ]);

// /* Registro Entrega */
// use("db_campus_alquiler");
// db.registro_entrega.aggregate([
//   {
//     $lookup: {
//       from: "alquiler",
//       localField: "ID_Alquiler_id",
//       foreignField: "_id",
//       as: "Alquiler_Info",
//     },
//   },
//   {
//     $unwind: "$Alquiler_Info",
//   },
//   {
//     $lookup: {
//       from: "empleado",
//       localField: "ID_Empleado_id",
//       foreignField: "_id",
//       as: "Empleado_Info",
//     },
//   },
//   {
//     $unwind: "$Empleado_Info",
//   },
//   {
//     $project: {
//       "Alquiler_Info.ID_Alquiler": 0,
//       "Empleado_Info.ID_Empleado": 0,
//     },
//   },
// ]);

/* CONSULTAS */

// 2.Mostrar todos los clientes registrados en la base de datos
use("db_campus_alquiler");
db.cliente.find({}, {_id:0});

//3. Obtener todos los automóviles disponibles para alquiler.
use("db_campus_alquiler");
db.automovil.aggregate([
  {
    $lookup: {
      from: "alquiler",
      localField: "ID_Automovil",
      foreignField: "ID_Automovil_id",
      as: "Alquiler_Info"
    }
  },
  {
    $match: {
      "Alquiler_Info.Estado":"Inactivo"
    }
  },
  {
    $project: {
      "Alquiler_Info":0
    }
  }
])

//4. Listar todos los alquileres activos junto con los datos de los clientes relacionados.
use("db_campus_alquiler");
db.alquiler.aggregate([
  {
    $match: {
      Estado: "Activo",
    },
  },
  {
    $lookup: {
      from: "cliente",
      localField: "ID_Cliente_id",
      foreignField: "ID_Cliente",
      as: "Cliente_Info",
    },
  },
  {
    $unwind: "$Cliente_Info",
  },
  {
    $project: {
      "Cliente_Info.ID_Cliente": 0,
    },
  },
]);

/* 5. Mostrar todas las reservas pendientes con los datos del cliente
y el automóvil reservado. */
use("db_campus_alquiler");
db.reserva.aggregate([
  {
    $match: {
      Estado: "Pendiente",
    },
  },
  {
    $lookup: {
      from: "cliente",
      localField: "ID_Cliente_id",
      foreignField: "ID_Cliente",
      as: "Cliente_Info",
    },
  },
  {
    $unwind: "$Cliente_Info",
  },
  {
    $lookup: {
      from: "automovil",
      localField: "ID_Automovil_id",
      foreignField: "ID_Automovil",
      as: "Automovil_Info",
    },
  },
  {
    $unwind: "$Automovil_Info",
  },
  {
    $project: {
        "ID_Cliente_id":0,
        "ID_Automovil_id":0,
      "Cliente_Info.ID_Cliente": 0,
      "Automovil_Info.ID_Automovil": 0,
    },
  },
]);

/* 6. Obtener los detalles del alquiler con el ID_Alquiler específico. */
use("db_campus_alquiler");
db.alquiler.aggregate([
  {
    $match: {
      ID_Alquiler: 2,
    },
  },
  {
    $lookup: {
      from: "cliente",
      localField: "ID_Cliente_id",
      foreignField: "ID_Cliente",
      as: "Cliente_Info",
    },
  },
  {
    $unwind: "$Cliente_Info",
  },
  {
    $lookup: {
      from: "automovil",
      localField: "ID_Automovil_id",
      foreignField: "ID_Automovil",
      as: "Automovil_Info",
    },
  },
  {
    $unwind: "$Automovil_Info",
  },
  {
    $project: {
      "Cliente_Info.ID_Cliente": 0,
      "Automovil_Info.ID_Automovil": 0,
    },
  },
]);

/* 7. Listar los empleados con el cargo de "Vendedor". */
use("db_campus_alquiler");
db.empleado.find({ Cargo: "Vendedor" });

/* 8. Mostrar la cantidad total de automóviles disponibles en cada
sucursal. */
use("db_campus_alquiler");
db.sucursal_automovil.aggregate([
  {
    $lookup: {
      from: "sucursal",
      localField: "ID_Sucursal_id",
      foreignField: "_id",
      as: "Sucursal_Info",
    },
  },
  {
    $unwind: "$Sucursal_Info",
  },
  {
    $project: {
      "Sucursal_Info.ID_Sucursal": 0,
      ID_Automovil_id: 0,
    },
  },
]);

/* 9. Obtener el costo total de un alquiler específico.*/
use("db_campus_alquiler");
db.alquiler.aggregate([{
  $match:{
    ID_Alquiler: 1
  }
},
{
$project:{
  _id: 0,
  Costo_Total: 1
}
}]);

/* 10.Listar los clientes con el DNI específico. */
use("db_campus_alquiler");
db.cliente.find({
  DNI: {$eq: 125356895},
});

/* 11.Mostrar todos los automóviles con una capacidad mayor a 5
personas. */
use("db_campus_alquiler");
db.automovil.find({
  Capacidad: { $gt: 5 },
});

/* 12.Obtener los detalles del alquiler que tiene fecha de inicio en
'2023-07-05'. */
use("db_campus_alquiler");
db.alquiler.find({
  Fecha_Inicio: {$eq:"2023-07-15"},
});

/* 13.Listar las reservas pendientes realizadas por un cliente
específico. */
use("db_campus_alquiler");
db.cliente.aggregate([
  {
    $lookup: {
      from: "reserva",
      localField: "ID_Cliente",
      foreignField: "ID_Cliente_id",
      as: "Reserva_Info",
    },
  },
  {
    $match: {
      "Reserva_Info.Estado": "Pendiente",
      "Reserva_Info.ID_Cliente_id": 1,
    },
  }
]);

/* 14.Mostrar los empleados con cargo de "Gerente" o "Asistente". */
use("db_campus_alquiler");
db.empleado.find({
  Cargo: { $in: ["Gerente", "Asistente"] },
});

/* 15.Obtener los datos de los clientes que realizaron al menos un
alquiler. */
use("db_campus_alquiler");
db.cliente.aggregate([
  {
    $lookup: {
      from: "alquiler",
      localField: "_id",
      foreignField: "ID_Cliente_id",
      as: "Alquiler_Info",
    },
  },
  {
    $match: {
      Alquiler_Info: { $ne: [] },
    },
  },
]);

/* 16.Listar todos los automóviles ordenados por marca y modelo. */
use("db_campus_alquiler");
db.automovil.find().sort({
  Marca: 1,
  Modelo: -1,
});

/* 17.Mostrar la cantidad total de automóviles en cada sucursal junto
con su dirección */
use("db_campus_alquiler");
db.sucursal_automovil.aggregate([
  {
    $group: {
      _id: "$ID_Sucursal_id",
      Cantidad_Total_Automoviles: { $sum: "$Cantidad_Disponible" },
    },
  },
  {
    $lookup: {
      from: "sucursal",
      localField: "_id",
      foreignField: "ID_Sucursal",
      as: "Sucursal_Info",
    },
  },
  {
    $unwind: "$Sucursal_Info",
  },
  {
    $project: {
      _id: 0,
      Sucursal: "$Sucursal_Info.Nombre",
      Direccion: "$Sucursal_Info.Direccion",
      Cantidad_Total_Automoviles: 1,
    },
  },
]);

/*18.Obtener la cantidad total de alquileres registrados en la base de
datos.*/
use("db_campus_alquiler");
db.alquiler.countDocuments({});

/*19.Mostrar los automóviles con capacidad igual a 5 personas y que
estén disponibles.*/
use("db_campus_alquiler");
db.automovil.aggregate([
  {
    $lookup: {
      from: "alquiler",
      localField: "_id",
      foreignField: "ID_Automovil_id",
      as: "Alquiler_Info"
    }
  },
  {
    $match: {
      "Alquiler_Info.Estado":"Inactivo",
      "Capacidad":{$gt: 2}
    }
  },
  {
    $project: {
      "_id": 1,
      "ID_Automovil": 1,
      "Marca": 1,
      "Modelo": 1,
      "Anio": 1,
      "Tipo": 1,
      "Capacidad": 1,
      "Precio_Diario":1,
      "Alquiler_Info.Estado":1
    }
  }
])

/*21.Listar los alquileres con fecha de inicio entre '2023-07-05' y
'2023-07-10'.*/
use("db_campus_alquiler");
db.alquiler.find({$and: [{Fecha_Inicio: {$gte:'2023-07-20' }},{Fecha_Inicio: {$lte: "2024-12-10"}}]});
